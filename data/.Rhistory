bm_species == bm_species_fac_levels[5] |
bm_species == bm_species_fac_levels[6] |
bm_species == bm_species_fac_levels[7] |
bm_species == bm_species_fac_levels[8]] <- 'BoGr'
bm_species[bm_species == bm_species_fac_levels[9] |
bm_species == bm_species_fac_levels[10] |
bm_species == bm_species_fac_levels[11] |
bm_species == bm_species_fac_levels[12] |
bm_species == bm_species_fac_levels[13] |
bm_species == bm_species_fac_levels[14] |
bm_species == bm_species_fac_levels[15] |
bm_species == bm_species_fac_levels[16] |
bm_species == bm_species_fac_levels[17]] <- 'ChLa'
bm_species[bm_species == bm_species_fac_levels[18] |
bm_species == bm_species_fac_levels[19] |
bm_species == bm_species_fac_levels[20] |
bm_species == bm_species_fac_levels[21]] <- 'LITT'
bm_species[bm_species == bm_species_fac_levels[22] |
bm_species == bm_species_fac_levels[23] |
bm_species == bm_species_fac_levels[24] |
bm_species == bm_species_fac_levels[25] |
bm_species == bm_species_fac_levels[26] |
bm_species == bm_species_fac_levels[27] |
bm_species == bm_species_fac_levels[28] |
bm_species == bm_species_fac_levels[29]] <- 'GuSa'
bm_species[bm_species == bm_species_fac_levels[30]] <- 'HeAn'
bm_species[bm_species == bm_species_fac_levels[31] |
bm_species == bm_species_fac_levels[32]] <- 'LaCo'
bm_species[bm_species == bm_species_fac_levels[33] |
bm_species == bm_species_fac_levels[34] |
bm_species == bm_species_fac_levels[35] |
bm_species == bm_species_fac_levels[36]] <- 'PoMu'
bm_species[bm_species == bm_species_fac_levels[37]] <- 'PrGl'
bm_species[bm_species == bm_species_fac_levels[38] |
bm_species == bm_species_fac_levels[39]] <- 'RaCo'
bm_species[bm_species == bm_species_fac_levels[40]] <- 'SaTr'
bm_species[bm_species == bm_species_fac_levels[41] |
bm_species == bm_species_fac_levels[42] |
bm_species == bm_species_fac_levels[43] |
bm_species == bm_species_fac_levels[44] |
bm_species == bm_species_fac_levels[45] |
bm_species == bm_species_fac_levels[46]] <- 'SoEl'
bm_species[bm_species == bm_species_fac_levels[47] |
bm_species == bm_species_fac_levels[48] |
bm_species == bm_species_fac_levels[49] |
bm_species == bm_species_fac_levels[50]] <- 'ZiGr'
bm_species
head(bm_raw)
## weight
bm_weight = bm_raw$Weight.g.
## check sizes and combine
nrow(bm_date)
## date
bm_date = rep(as.Date('2018-09-22'), times = 217)
## check sizes and combine
nrow(bm_date)
## check sizes and combine
length(bm_date)
length(bm_weight)
length(bm_date)
length(bm_plot)
length(bm_species)
length(bm_weight)
bm_clean = expand.grid(date = bm_date, plot = bm_plot)
bm_clean$code = bm_species
bm_clean$weight = bm_weight
head(bm_clean)
## add additional species information using the code
sp = read.csv('species.csv')
bm_clean$binomial = 'NA'
bm_clean$lifeform = 'NA'
bm_clean$family = 'NA'
for (i in 1:length(bm_clean$binomial)){
bm_clean$binomial[i] <- as.character(subset(sp, Code == as.character(bm_clean$code[i]))$Latin.binomial)
bm_clean$lifeform[i] <- as.character(subset(sp, Code == as.character(bm_clean$code[i]))$Life.form)
bm_clean$family[i] <- as.character(subset(sp, Code == as.character(bm_clean$code[i]))$Family)
}
bm_clean$genus = vapply(strsplit(bm_clean$binomial, " ", fixed = TRUE), "[", "", 1)
bm_clean$species = vapply(strsplit(bm_clean$binomial, " ", fixed = TRUE), "[", "", 2)
## check and write out
head(bm_clean)
bm_clean
tail(bm_clean)
bm_clean = expand.grid(date = bm_date, plot = bm_plot)
bm_clean$code = bm_species
bm_clean$weight = bm_weight
head(bm_clean)
tail(bm_clean)
length(bm_date)
length(bm_plot)
length(bm_species)
length(bm_weight)
bm_clean = expand.grid(date = bm_date, plot = bm_plot)
tail(bm_clean)
## check sizes and combine
length(bm_date)
bm_plot
bm_date
?expand.grid
## read in data
sm_raw = read.csv('raw/soil_moisture.csv')
head(sm_raw)
nrow(sm_raw)
## make a new data frame
sm_date = c(rep(as.Date('2018-07-27'), times = 80),
rep(as.Date('2018-08-03'), times = 80),
rep(as.Date('2018-08-09'), times = 80),
rep(as.Date('2018-08-16'), times = 80),
rep(as.Date('2018-08-24'), times = 80),
rep(as.Date('2018-08-30'), times = 80),
rep(as.Date('2018-09-07'), times = 80),
rep(as.Date('2018-09-16'), times = 80))
sm_plot = c(rep(seq(1, 40, 1), times = 16))
sm_location = rep(c(rep('under', times = 40), rep('away', times = 40)), times = 8)
sm_vwc_rows = c(2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24)
sm_vwc = c(as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[1]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[2]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[3]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[4]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[5]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[6]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[7]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[8]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[9]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[10]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[11]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[12]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[13]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[14]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[15]])),
as.numeric(as.character(sm_raw[2:41, sm_vwc_rows[16]])))
## combine it all together
## combine it all together
sm_clean = expand.grid(date = sm_date, plot = sm_plot)
sm_date
sm_clean
nrow(sm_clean)
length(sm_date)
length(sm_plot)
length(sm_location)
length(sm_vwc)
library(reshape2)
sm_clean = melt(data.frame(sm_date, sm_plot))
sm_clean
?melt
data.frame(sm_date, sm_plot)
sm_clean = data.frame(sm_date, sm_plot)
sm_clean$location = sm_location
sm_clean$vwc = sm_vwc
head(sm_clean)
tail(sm_clean)
write.csv(sm_clean, 'sm_clean.csv')
bm_clean = data.frame(date = bm_date, plot = bm_plot)
bm_clean
sm_clean = data.frame(date = sm_date, plot = sm_plot)
sm_clean$location = sm_location
sm_clean$vwc = sm_vwc
head(sm_clean)
tail(sm_clean)
write.csv(sm_clean, 'sm_clean.csv')
bm_clean = data.frame(date = bm_date, plot = bm_plot)
bm_clean$code = bm_species
bm_clean$weight = bm_weight
head(bm_clean)
tail(bm_clean)
sp = read.csv('species.csv')
bm_clean$binomial = 'NA'
bm_clean$lifeform = 'NA'
bm_clean$family = 'NA'
for (i in 1:length(bm_clean$binomial)){
bm_clean$binomial[i] <- as.character(subset(sp, Code == as.character(bm_clean$code[i]))$Latin.binomial)
bm_clean$lifeform[i] <- as.character(subset(sp, Code == as.character(bm_clean$code[i]))$Life.form)
bm_clean$family[i] <- as.character(subset(sp, Code == as.character(bm_clean$code[i]))$Family)
}
bm_clean$genus = vapply(strsplit(bm_clean$binomial, " ", fixed = TRUE), "[", "", 1)
bm_clean$species = vapply(strsplit(bm_clean$binomial, " ", fixed = TRUE), "[", "", 2)
## check and write out
head(bm_clean)
tail(bm_clean)
write.csv(bm_clean, 'bm_clean.csv')
# Clean LAI data
## script to clean the LAI data for the mesquite comparison
## load packages
library(tidyverse)
library(reshape2)
lai_raw = read.csv('clean_lai/lai_output.csv')
head(lai_raw)
nrow(lai_raw)
## date
bm_date = rep(as.Date('2018-09-22'), times = 40) # for all 40 plots
## date
lai_date = rep(as.Date('2018-09-22'), times = 40) # for all 40 plots
## add remarks to LAI data (to indicate plot #)
lai_remarks = read.csv('clean_lai/lai_remarks.csv')
lai_remarks
lai_raw$remark = 'NA'
1:length(lai_raw$B_Obs)
i = 1
lai_raw$remark[lai_raw$B_obs == lai_raw$B_obs[i]]
lai_raw$B_obs
lai_raw$remark[lai_raw$B_Obs == lai_raw$B_Obs[i]]
lai_raw$B_Obs[i]
lai_remarks$Remark[lai_remarks$B_Obs == lai_raw$B_Obs[i]]
lai_raw$remark[lai_raw$B_Obs == lai_raw$B_Obs[i]] <- lai_remarks$Remark[lai_remarks$B_Obs == lai_raw$B_Obs[i]]
lai_raw$remark[lai_raw$B_Obs == lai_raw$B_Obs[i]]
lai_raw$remark[lai_raw$B_Obs == lai_raw$B_Obs[i]] <- as.character(lai_remarks$Remark[lai_remarks$B_Obs == lai_raw$B_Obs[i]])
lai_raw$remark[lai_raw$B_Obs == lai_raw$B_Obs[i]]
for (i in 1:length(lai_raw$B_Obs)){
lai_raw$remark[lai_raw$B_Obs == lai_raw$B_Obs[i]] <- as.character(lai_remarks$Remark[lai_remarks$B_Obs == lai_raw$B_Obs[i]])
}
lai_raw$remark
lai_remarks = read.csv('clean_lai/lai_remarks.csv')
lai_raw$remark = 'NA'
for (i in 1:length(lai_raw$B_Obs)){
lai_raw$remark[lai_raw$B_Obs == lai_raw$B_Obs[i]] <- as.character(lai_remarks$Remark[lai_remarks$B_Obs == lai_raw$B_Obs[i]])
}
lai_raw$remark
lai_remarks = read.csv('clean_lai/lai_remarks.csv')
lai_raw$remark = 'NA'
for (i in 1:length(lai_raw$B_Obs)){
lai_raw$remark[lai_raw$B_Obs == lai_raw$B_Obs[i]] <- as.character(lai_remarks$Remark[lai_remarks$B_Obs == lai_raw$B_Obs[i]])
}
lai_raw$remark
?strsplit
strsplit('P17', 'P')
strsplit('P17', 'P')[1]
strsplit('P17', 'P')[[1]][1]
strsplit('P17', 'P')[[1]][2]
lai_plot_character = strsplit(lai_raw$remark, 'P')[[1]][2]
lai_plot_character
strsplit(lai_raw$remark, 'P')
strsplit(lai_raw$remark, 'P')[[]][2]
?apply
apply(strsplit(lai_raw$remark, 'P'), '[')
apply(strsplit(lai_raw$remark, 'P'), '[', mean)
?strsplit
sapply(strsplit(lai_raw$remark, 'P'), '[', 2)
as.numeric(sapply(strsplit(lai_raw$remark, 'P'), '[', 2))
lai_plot = as.numeric(sapply(strsplit(lai_raw$remark, 'P'), '[', 2))
length(lai_raw)
nrow(lai_raw)
## date
lai_date = rep(as.Date('2018-09-22'), times = nrow(lai_raw)) # for all 40 plots
## combine it all together
lai_clean = data.frame(date = lai_date, plot = lai_plot, lai = lai_raw$LAI)
head(lai_clean)
tail(lai_clean)
write.csv(lai_clean, 'lai_clean.csv')
## load packages
library(tidyverse)
library(reshape2)
## read in data
sc_raw = read.csv('raw/spp_comp_v2.csv')
head(sc_raw)
## read in data
sc_raw = read.csv('raw/spp_comp_v2.csv')
head(sc_raw)
nrow(sc_raw)
## date
sc_date = rep(as.Date('2018-09-22'), times = 313)
## plot
sc_plot = sc_raw$plot
## location
sc_location = as.character(sc_raw$location)
sc_location
sc_location[sc_location == 'A'] <- 'away'
sc_location[sc_location == 'U'] <- 'under'
## code
sc_code = as.character(sc$code)
## code
sc_code = as.character(sc_raw$code)
sc_code
levels(as.factor(sc_code))
sc_code[sc_code == "PoPi"]
### convert PoPi to PoMu
sc_code[sc_code == "PoPi"] <- "PoMu"
sc_code[sc_code == "PoPi"]
## cover
sc_cover = sc_raw$cover
## check sizes and combine
length(sc_date)
length(sc_plot)
length(sc_location)
length(sc_code)
length(sc_cover)
sc_clean = data.frame(date = sc_date, plot = sc_plot, location = sc_location)
bm_clean$code = bm_code
sc_clean = data.frame(date = sc_date, plot = sc_plot, location = sc_location)
sc_clean$code = sc_code
sc_clean$cover = sc_cover
head(sc_clean)
tail(sc_clean)
## add additional species information using the code
sp = read.csv('species.csv')
sc_clean$binomial = 'NA'
sc_clean$lifeform = 'NA'
sc_clean$family = 'NA'
for (i in 1:length(sc_clean$binomial)){
sc_clean$binomial[i] <- as.character(subset(sp, Code == as.character(sc_clean$code[i]))$Latin.binomial)
bm_clsc_cleanean$lifeform[i] <- as.character(subset(sp, Code == as.character(sc_clean$code[i]))$Life.form)
sc_clean$family[i] <- as.character(subset(sp, Code == as.character(sc_clean$code[i]))$Family)
}
sc_clean$binomial = 'NA'
sc_clean$lifeform = 'NA'
sc_clean$family = 'NA'
for (i in 1:length(sc_clean$binomial)){
sc_clean$binomial[i] <- as.character(subset(sp, Code == as.character(sc_clean$code[i]))$Latin.binomial)
sc_clean$lifeform[i] <- as.character(subset(sp, Code == as.character(sc_clean$code[i]))$Life.form)
sc_clean$family[i] <- as.character(subset(sp, Code == as.character(sc_clean$code[i]))$Family)
}
i
sc_clean[28,]
sc_clean[27,]
sc_clean[29,]
subset(sp, Code == as.character(sc_clean$code[i]))
sc_clean$code[i]
as.character(sc_clean$code[i])
subset(sp, Code == as.character(sc_clean$code[i]))
head(sp)
sp = read.csv('species.csv')
sc_clean$binomial = 'NA'
sc_clean$lifeform = 'NA'
sc_clean$family = 'NA'
for (i in 1:length(sc_clean$binomial)){
sc_clean$binomial[i] <- as.character(subset(sp, Code == as.character(sc_clean$code[i]))$Latin.binomial)
sc_clean$lifeform[i] <- as.character(subset(sp, Code == as.character(sc_clean$code[i]))$Life.form)
sc_clean$family[i] <- as.character(subset(sp, Code == as.character(sc_clean$code[i]))$Family)
}
sc_clean$genus = vapply(strsplit(sc_clean$binomial, " ", fixed = TRUE), "[", "", 1)
sc_clean$species = vapply(strsplit(sc_clean$binomial, " ", fixed = TRUE), "[", "", 2)
head(sc_clean)
tail(sc_clean)
sc_clean = arrange(sc_clean, date, plot, location, code)
rite.csv(sc_clean, 'sc_clean.csv')
write.csv(sc_clean, 'sc_clean.csv')
sc = read.csv("../data/sc_clean.csv") # cover (species composition)
library(tidyverse)
library(vioplot)
library(lme4)
library(car)
library(emmeans)
sc = read.csv("../data/sc_clean.csv") # cover (species composition)
sc
head(sc)
##########################################################################################
### Q6: does mesquite influence species richness, diversity, or evenness?
##########################################################################################
#### remove litter and bareground from cover data
sc_live = subset(sc, code != 'BARE' & code != 'LITT')
head(sc_live)
#### calculate richness
sc_richness_pre = data.frame(plot = rep(seq(1, 40), 2),
location = c(rep('under', 40), rep('away', 40)),
date = rep('2018-09-22', times = 80))
nrow(sc_richness_pre)
#### calculate species richness per plot type (for non-litter)
sc_richness_group_by = group_by(sc_live, date, plot, location)
sc_richness_sums = summarise(sc_richness_group_by, richness = n())
head(sc_richness_sums)
nrow(sc_richness_sums)
##### combine richness into data fram with zeros
sc_richness = left_join(sc_richness_pre, sc_richness_sums)
head(sc_richness)
sc_richness$richness[is.na(sc_richness$richness)] = 0
tail(sc_richness)
##### run the analysis
t.test(subset(sc_richness, location == 'under')$richness,
subset(sc_richness, location == 'away')$richness,
paired = T)
sc_live$cover2 = (sc_live$cover / 100) ^ 2
#### calculate richness
sc_diversity_pre = data.frame(plot = rep(seq(1, 40), 2),
location = c(rep('under', 40), rep('away', 40)),
date = rep('2018-09-22', times = 80))
nrow(sc_diversity_pre)
#### calculate species richness per plot type (for non-litter)
sc_diversity_group_by = group_by(sc_live, date, plot, location)
sc_diversity_sums = summarise(sc_richness_group_by, cover2_sum = sum(cover2))
sc_diversity_group_by
sc_diversity_sums = summarise(sc_richness_group_by, cover2_sum = sum(cover2))
sc_diversity_sums = summarise(sc_diversity_group_by, cover2_sum = sum(cover2))
#### calculate diversity
sc_diversity_sums$D = 1 / sc_diversity_sums$cover2_sum
sc_diversity_sums$D
1/.01
##### combine diversity into data fram with zeros
sc_diversity = left_join(sc_diversity_pre, sc_diversity_sums)
head(sc_diversity)
sc_diversity$D[is.na(sc_diversity$D)] = 0
head(sc_diversity)
tail(sc_diversity)
t.test(subset(sc_diversity, location == 'under')$D,
subset(sc_diversity, location == 'away')$D,
paired = T
)
t.test(subset(sc_diversity, location == 'under')$D,
subset(sc_diversity, location == 'away')$D,
paired = T)
hist(sc_diversity$D)
head(sc_diversity)
sc_live$logcover = log(sc_live$cover) # percent cover squared
#### calculate diversity
sc_diversity_pre = data.frame(plot = rep(seq(1, 40), 2),
location = c(rep('under', 40), rep('away', 40)),
date = rep('2018-09-22', times = 80))
nrow(sc_diversity_pre)
#### get sum of cover2 by plot
sc_diversity_group_by = group_by(sc_live, date, plot, location)
sc_diversity_sums = summarise(sc_diversity_group_by, logcover_sum = sum(cover2))
#### calculate diversity
sc_diversity_sums$H = -sc_diversity_sums$log_sum
#### calculate diversity
sc_diversity_sums$H = -sc_diversity_sums$logcover_sum
##### combine diversity into data fram with zeros
sc_diversity = left_join(sc_diversity_pre, sc_diversity_sums)
head(sc_diversity)
sc_diversity$H[is.na(sc_diversity$H)] = 0
head(sc_diversity)
tail(sc_diversity)
##### run the analysis
t.test(subset(sc_diversity, location == 'under')$H,
subset(sc_diversity, location == 'away')$H,
paired = T)
hist(sc_diversity$H) # no difference, but some odd numbers...
sc_live_sums = summarise(sc_live_group_by_plot, cover_sum = sum(cover))
#### get total living biomass of the each plot
sc_live_group_by_plot = group_by(sc_live, date, plot, location)
sc_live_sums = summarise(sc_live_group_by_plot, cover_sum = sum(cover))
#### join cover sums to sc_live
sc_live_revised = left_join(sc_live, sc_live_sums)
head(sc_live_revised)
#### get relative cover
sc_live_revised$cover_revised = sc_live_revised$cover / sc_live_revised$cover_sum
sc_live_revised$cover_revised
nrow(sc_live)
#### do diversity calcs
sc_live_revised$logcover = log(sc_live_revised$cover) # percent cover squared
#### calculate diversity
sc_diversity_pre = data.frame(plot = rep(seq(1, 40), 2),
location = c(rep('under', 40), rep('away', 40)),
date = rep('2018-09-22', times = 80))
nrow(sc_diversity_pre)
#### get sum of cover2 by plot
sc_diversity_group_by = group_by(sc_live_revised, date, plot, location)
sc_diversity_sums = summarise(sc_diversity_group_by, logcover_sum = sum(logcover))
#### calculate diversity
sc_diversity_sums$H = -sc_diversity_sums$logcover_sum
##### combine diversity into data fram with zeros
sc_diversity = left_join(sc_diversity_pre, sc_diversity_sums)
head(sc_diversity)
sc_diversity$H[is.na(sc_diversity$H)] = 0
head(sc_diversity)
tail(sc_diversity)
#### get relative cover
sc_live_revised$cover_revised = sc_live_revised$cover / sc_live_revised$cover_sum
#### do diversity calcs
sc_live_revised$logcover = log(sc_live_revised$cover_revised) # percent cover squared
sc_live_revised$logcover
#### calculate diversity
sc_diversity_pre = data.frame(plot = rep(seq(1, 40), 2),
location = c(rep('under', 40), rep('away', 40)),
date = rep('2018-09-22', times = 80))
nrow(sc_diversity_pre)
#### get sum of cover2 by plot
sc_diversity_group_by = group_by(sc_live_revised, date, plot, location)
sc_diversity_sums = summarise(sc_diversity_group_by, logcover_sum = sum(logcover))
#### calculate diversity
sc_diversity_sums$H = -sc_diversity_sums$logcover_sum
sc_diversity_sums$H
##### combine diversity into data fram with zeros
sc_diversity = left_join(sc_diversity_pre, sc_diversity_sums)
head(sc_diversity)
sc_diversity$H[is.na(sc_diversity$H)] = 0
head(sc_diversity)
tail(sc_diversity)
sc_live_revised
##### run the analysis
t.test(subset(sc_diversity, location == 'under')$H,
subset(sc_diversity, location == 'away')$H,
paired = T)
hist(sc_diversity$H) # no difference, but some odd numbers...
hist(log(sc_diversity$H)) # no difference, but some odd numbers...
##### run the analysis
t.test(log(subset(sc_diversity, location == 'under')$H),
log(subset(sc_diversity, location == 'away')$H),
paired = T)
log(subset(sc_diversity, location == 'away')$H)
plot(subset(sc_diversity, location == 'under')$H,
subset(sc_diversity, location == 'away')$H)
plot(H ~ location, sc_diversity)
#### put diversity and richness data together
sc_evenness = lef_join(sc_richness, sc_diversity)
#### put diversity and richness data together
sc_evenness = left_join(sc_richness, sc_diversity)
head(sc_evenness)
#### calculate evenness
sc_evenness$evenness = sc_evenness$H / sc_evenness$richness
#### run analysis
t.test(subset(sc_diversity, location == 'under')$evenness,
subset(sc_diversity, location == 'away')$evenness,
paired = T)
#### run analysis
t.test(subset(sc_evenness, location == 'under')$evenness,
subset(sc_evenness, location == 'away')$evenness,
paired = T)
sc_evenness
#### run analysis
t.test(subset(sc_evenness, location == 'under')$evenness,
subset(sc_evenness, location == 'away')$evenness,
paired = T)
hist(sc_evenness$evenness) # no difference
plot(evenness ~ location, sc_evenness)
